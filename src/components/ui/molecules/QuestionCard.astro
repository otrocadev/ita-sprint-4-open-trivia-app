---
import Option from '../atoms/Option.astro'
import AnseredQuestionDialog from './AnseredQuestionDialog.astro'
import { decodeHtml } from 'src/utils/appUtils.ts'
import { getPossibleResponses } from 'src/utils/questionUtils'
import type { TriviaResponse } from 'src/types/triviaTypes.ts'

const { APIresponse } = Astro.props as TriviaResponse

let questionData
let questionText: string = ''
let possibleResponses: string[] = []
let correctAnswerPosition: number = -1
let error: boolean = false

try {
  questionData = APIresponse.results?.[0]
  if (!questionData) {
    throw new Error('No question data available')
  }
  // Converting HTML entities to normal text
  questionText = decodeHtml(questionData.question)

  // Using the utility function to get possible responses and correct answer position
  const posibleResponsesData = getPossibleResponses(questionData)
  possibleResponses = posibleResponsesData.possibleResponses
  correctAnswerPosition = posibleResponsesData.correctAnswerPosition
} catch (err) {
  error = true
  console.error('Error printing the question:', err)
}

const isAnswerCorrect = (responseIndex: number) => {
  return responseIndex === correctAnswerPosition
}
---

{
  error ? (
    <article class="flex flex-col gap-8 bg-incorrect text-white p-8 border-2 border-gray-900 rounded-2xl shadow-2xl w-full max-w-3xl m-auto">
      <h2 class="text-xl">⚠️ Oops! Something went wrong...</h2>
      <span>
        The question did not work properly, please try again or contact the
        developer if the problem persists.
      </span>
    </article>
  ) : (
    <article
      id="question-card"
      class="flex flex-col gap-8 bg-background-card p-8 border-2 border-gray-900 rounded-2xl shadow-2xl w-full max-w-3xl m-auto"
    >
      <span>{questionText}</span>
      <div class="flex flex-col gap-4 w-fit justify-center items-center m-auto min-w-xl">
        {possibleResponses.map((response, index) => (
          <Option isCorrect={isAnswerCorrect(index)}>{response}</Option>
        ))}
      </div>
    </article>

    <section id="answered-question-dialog" class="absolute top-0 left-0 w-full h-full z-10 backdrop-blur-sm bg-black/50 hidden">
        <AnseredQuestionDialog />
    </section>
  )
}

<script>
  import { manageOptionButtonClases } from 'src/utils/questionUtils'
  import { manageResponse } from 'src/utils/appUtils'

  const buttons = document.querySelectorAll('.response-option')
  let isAlreadyClicked = false

  buttons.forEach((button: any) => {
    button.addEventListener('click', (event: Event) => {
      const button = event.target as HTMLButtonElement
      const isCorrect = button.getAttribute('data-is-correct') === 'true'
      const answeredQuestionDialog = document.getElementById('answered-question-dialog')
      const gameOverDialog = document.getElementById('game-over-dialog')
      const correctAnswerDialog = document.getElementById('correct-answer-dialog')
      const incorrectAnswerDialog = document.getElementById('incorrect-answer-dialog')

      // Controlling that only one option can be clicked
      if (isAlreadyClicked) return
      isAlreadyClicked = true

      manageOptionButtonClases(button, isCorrect)
      const gameStatus = manageResponse(isCorrect)
      console.log(gameStatus)

      
      setTimeout(() => {
      answeredQuestionDialog?.classList.remove('hidden')
      
      if (gameStatus === 'game-over') {
        gameOverDialog?.classList.remove('hidden')
        gameOverDialog?.classList.add('grid')
      } else if (gameStatus === 'correct') {
        // Crida a la API + inserta curiositat de la resposta correcta
        correctAnswerDialog?.classList.remove('hidden')
        correctAnswerDialog?.classList.add('grid')
      } else if (gameStatus === 'incorrect') {
        // Cerida a la API que t'insulta cretivament + insetar el text
        incorrectAnswerDialog?.classList.remove('hidden')
        incorrectAnswerDialog?.classList.add('grid')
      }
    }, 2000)
    })
  })
</script>
